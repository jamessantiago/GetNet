<div class="page-content mdl-grid">
    @if (ViewData["Vlans"] != null)
    {
        <div class="mdl-shadow--2dp mdl-color--white getnet-cell mdl-cell mdl-cell--2-col mdl-typography--text-center">
            <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="vlan_all">
                <input type="checkbox" id="vlan_all" class="mdl-switch__input" checked>
                <span class="mdl-switch__label">All Vlans</span>
            </label>
            @foreach (getnet.core.Model.Entities.Vlan vlan in ((IEnumerable<getnet.core.Model.Entities.Vlan>) ViewData["Vlans"]).OrderBy(d => d.VlanNumber))
            {
                <label class="mdl-switch mdl-js-switch mdl-js-ripple-effect" for="vlan_@vlan?.VlanNumber">
                    <input type="checkbox" id="vlan_@vlan?.VlanNumber" data-vlan="@vlan?.VlanNumber" class="mdl-switch__input vlans" checked>
                    <span class="mdl-switch__label">Vlan @vlan?.VlanNumber</span>
                </label>
            }
        </div>
    }


    <div class="mdl-shadow--2dp mdl-color--white getnet-cell mdl-cell @(ViewData["Vlans"] != null ? "mdl-cell--10-col" : "mdl-cell--12-col")">
        <table id="end-table" class="mdl-data-table" width="100%" cellspacing="0">
            <thead>
                <tr>
                    @if (ViewData["SiteId"] == null)
                    {
                        <th>Site</th>
                    }
                    <th>Vlan</th>
                    <th>Hostname</th>
                    <th>IP</th>
                    <th>MAC</th>
                    <th>Last Seen</th>
                </tr>
            </thead>
        </table>
    </div>
</div>


<script>
    var etable = $('#end-table').on('processing.dt', function (e, settings, processing) {
        $('#fullpage-loading').css('display', processing ? 'block' : 'none');
    }).DataTable({
        ajax: {
            url: "/endpoint/endpointhandler",
            data: {
                siteid: "@ViewData["SiteId"]",
                text: "@ViewData["SearchText"]"
            }
        },
        processing: false,
        serverSide: true,
        columnDefs: [
            {
                targets: '_all',
                className: 'mdl-data-table__cell--non-numeric'
            }
        ],
        language: {
            search: "Filter:"
        },
        rowCallback: function (row, data) {
            var ca = 1;
            @if (ViewData["SiteId"] == null)
            {
                @:$(row).children("td").first().html('<a href="/s/' + data[0] + '">' + data[0] + "</a>");
                @:ca = 0;
            }
            $(row).children("td").eq(2 - ca).attr("title", data[2 - ca]).html(getnet.truncElips(data[2 - ca], 15));

            $(row).attr('id', data[4 - ca] + "_row");
            $(row).children("td").last().addClass("pingme");

            $(row).children("td").last().html(data[5 - ca] + '<button id="' + data[4 - ca] + '" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon">' +
                '<i class="material-icons" role="presentation">arrow_drop_down</i>' +
                '<span class="visuallyhidden">NetworkDevice</span>' +
                '</button>' +
                '<ul class="devbuts mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect" for="' + data[4 - ca] + '">' +
                '<li id="' + data[4 - ca] + '_ping" class="pingme mdl-menu__item" data-ip="' + data[3 - ca] + '" data-colortarget="#' + data[4 - ca] + '_row"' + ' onclick="getnet.ping(\'#' + data[4 - ca] + '_ping\')">Ping</li>' +
                '<li class="mdl-menu__item" onclick="getnet.hipkuSnack(\'' + data[3 - ca] + '\')">Hipku</li>' +
                '<li class="mdl-menu__item" onclick="window.location.href = \'/e/' + encodeURIComponent(data[4 - ca]) + '\'">Details</li>' +
                '<li class="mdl-menu__item" onclick="window.location.href = \'/endpoint/edit/' + encodeURIComponent(data[4 - ca]) + '\'">Edit</li>' +
                '</ul>');
        },
        initComplete: function () {
            componentHandler.upgradeElements(document.querySelectorAll('.devbuts'));
        },
        drawCallback: function () {
            componentHandler.upgradeElements(document.querySelectorAll('.devbuts'));
        }
    });

    $(etable.tables().containers()).children("div").first().children("div").first().removeClass("mdl-cell mdl-cell--6-col").addClass("mdl-cell mdl-cell--5-col");
    $(etable.tables().containers()).children("div").first().prepend('' +
                '<button id="dtblbut" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon">' +
                '<i class="material-icons" role="presentation">more_vert</i>' +
                '<span class="visuallyhidden">NetworkDevice</span>' +
                '</button>' +
                '<ul id="devlst" class="mdl-menu mdl-menu--bottom-left mdl-js-menu mdl-js-ripple-effect" for="dtblbut">' +
                @if (ViewData["SiteId"] != null)
                {
                @:'<li class="mdl-menu__item" onclick="getnet.get(\'/site/rediscoverendpoints/@ViewData["SiteId"]\');getnet.refresh.run(\'Snacks\')">Rediscover</li>' +
                }
                '<li class="mdl-menu__item" onclick="getnet.pingall()">Ping All</li>' +
                '</ul>');
    componentHandler.upgradeElement(document.querySelector('#devlst'));


    componentHandler.upgradeElements(document.querySelectorAll('.mdl-switch'));

    $("#vlan_all").on("click", function () {
        if ($("#vlan_all").is(":checked") == true) {
            $('.vlans').each(function(index, element) {
                element.MaterialCheckbox.check();
            });
        } else {
            $('.vlans').each(function (index, element) {
                element.MaterialCheckbox.uncheck();
            });
        }
    });

    $(".vlans").on("click", function () {
        var filter = '';
        $(".vlans").each(function () {
            if ($(this).is(":checked") == false) {
                getnet.log("vlan " + $(this).data("vlan") + " is not checked");
                filter = filter + $(this).data("vlan") + ",";
            }
        });
        filter = filter.slice(0, -1);
        if (filter === '')
            filter = 'all';
        etable.column(0).search(filter).draw();
    });
</script>
